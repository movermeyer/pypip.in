
{
  "swagger": "2.0",
  "info": {
    "description": "A recreation of the (shuttered) pypip.in API that uses shields.io instead",
    "title": "pypip.in Replacement API",
    "version": "1.0.0"
  },
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/": {
      "get": {
        "tags": [],
        "description": "The main landing page of the new pypip.in",
        "produces": [
          "text/html"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Media type of request"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "responses": {
            "default": {
              "statusCode": "200",
              "responseTemplates": {
                "text/html": "<html>\n\n<head>\n    <meta content=\"text/html;charset=utf-8\" http-equiv=\"Content-Type\">\n    <meta content=\"utf-8\" http-equiv=\"encoding\"> <style>.translation-form {\n    width: 300px;\n    height: auto;\n\n    background: #[[#]]#F5F5F5;\n    border: 1px solid #[[#]]#EAEAEA;\n    padding: 10px;\n\n    -webkit-transition: opacity 0.5s ease-in-out;\n    -moz-transition: opacity 0.5s ease-in-out;\n    transition: opacity 0.5s ease-in-out;\n}\n\n.translation-form .prompt {\n    font-weight: bold;\n}\n\n.translation-form .warning {\n    color: #[[#]]#D8000C;\n    background-color: #[[#]]#FFD2D2;\n    border: 1px solid  rgb(182, 1, 10);\n    margin-top: 10px;\n    border-radius: 10px;\n    padding: 5px\n}</style> <script type=\"text/javascript\">ENDPOINT_CONVERSION = new Map([\n    [\"format\", \"format\"],\n    [\"implementation\", \"implementation\"],\n    [\"license\", \"l\"],\n    [\"py_versions\", \"pyversions\"],\n    [\"status\", \"status\"],\n    [\"v\", \"v\"],\n    [\"version\", \"v\"],\n    [\"wheel\", \"wheel\"]\n]);\n\nQUERY_PARAM_CONVERSION = new Map([\n    [\"text\", \"label\"]\n]);\n\nPERIOD_PARAM_TO_ENDPOINT = new Map([\n    [\"day\", \"dd\"],\n    [\"week\", \"dw\"],\n    [\"month\", \"dm\"],\n]);\n\nfunction handle_downloads_endpoint(url_params) {\n    // Warning: mutates url_params\n    var new_endpoint = \"dm\"\n    if (url_params.has(\"period\")) {\n        new_endpoint = PERIOD_PARAM_TO_ENDPOINT.get(url_params.get(\"period\")) || new_endpoint;\n        url_params.delete(\"period\");\n    }\n    return new_endpoint;\n}\n\nfunction convert_params(url_params) {\n    // Warning: mutates url_params\n    for (var pair of url_params.entries()) {\n        if (QUERY_PARAM_CONVERSION.has(pair[0])) {\n            url_params.set(QUERY_PARAM_CONVERSION.get(pair[0]), pair[1]);\n        }\n    }\n}\n\nfunction normalize_url(url) {\n    return url.toLowerCase().replace(/^\"/, '').replace(/\"#[[$]]#/, '');\n}\n\nfunction pypip_dot_in_to_shields_dot_io(url) {\n    url = normalize_url(url);\n    var parser = document.createElement('a');\n    parser.href = url;\n\n    url_params = new URLSearchParams(parser.search);\n    convert_params(url_params);\n\n    var endpoint = parser.pathname.split('/')[1];\n    var project = parser.pathname.split('/')[2];\n\n    var is_download_count_badge = false;\n    var is_egg_badge = endpoint === 'egg';\n\n    if (endpoint === 'd' || endpoint === 'download') {\n        shields_endpoint = handle_downloads_endpoint(url_params);\n        is_download_count_badge = true;\n    } else {\n        shields_endpoint = ENDPOINT_CONVERSION.get(endpoint);\n    }\n\n    if (shields_endpoint === undefined) {\n        result = null\n    } else {\n        result = `https://img.shields.io/pypi/#[[$]]#{shields_endpoint}/#[[$]]#{project}.svg#[[$]]#{url_params.keys().next().done ? '' : '?' + url_params.toString()}`;\n    }\n\n    return [result, is_download_count_badge, is_egg_badge];\n}\n\nfunction go() {\n    var results = pypip_dot_in_to_shields_dot_io(document.getElementById('pypip_url').value);\n    var shields_dot_io_url = results[0];\n    var is_download_count_badge = results[1]\n    var is_egg_badge = results[2]\n\n    document.getElementById('shieldsio_url').value = shields_dot_io_url !== null ? shields_dot_io_url : \"\";\n    document.getElementById('preview').hidden = !(shields_dot_io_url !== null);\n    var resulting_badge_link = document.getElementById('resulting_badge').href = shields_dot_io_url;\n    var resulting_badge = document.getElementById('resulting_badge');\n    resulting_badge.src = shields_dot_io_url;\n    resulting_badge.hidden = !(shields_dot_io_url !== null);\n\n    document.getElementById(\"egg_badge_warning\").hidden = !is_egg_badge\n    document.getElementById(\"failed_warning\").hidden = !(shields_dot_io_url === null && !is_egg_badge)\n    document.getElementById(\"download_badge_warning\").hidden = !is_download_count_badge\n}\n\nfunction copy() {\n    //https://stackoverflow.com/a/30810322\n    var shieldsio_url_text_box = document.getElementById('shieldsio_url');\n    shieldsio_url_text_box.select();\n\n    var shieldsio_url_button = document.getElementById('copy_url_button');\n\n    try {\n        var successful = document.execCommand('copy');\n        shieldsio_url_button.innerHTML = \"Copied!\"\n    } catch (err) {\n        shieldsio_url_button.innerHTML = \"Unable to copy. Sorry!\"\n    }\n\n}</script>\n<script type=\"text/javascript\">/*! (C) Andrea Giammarchi - Mit Style License */\n/* https://github.com/WebReflection/url-search-params */\nvar URLSearchParams = URLSearchParams || function () { \"use strict\"; function URLSearchParams(query) { var index, key, value, pairs, i, length, dict = Object.create(null); this[secret] = dict; if (!query) return; if (typeof query === \"string\") { if (query.charAt(0) === \"?\") { query = query.slice(1) } for (pairs = query.split(\"&\"), i = 0, length = pairs.length; i < length; i++) { value = pairs[i]; index = value.indexOf(\"=\"); if (-1 < index) { appendTo(dict, decode(value.slice(0, index)), decode(value.slice(index + 1))) } else if (value.length) { appendTo(dict, decode(value), \"\") } } } else { if (isArray(query)) { for (i = 0, length = query.length; i < length; i++) { value = query[i]; appendTo(dict, value[0], value[1]) } } else { for (key in query) { appendTo(dict, key, query[key]) } } } } var isArray = Array.isArray, URLSearchParamsProto = URLSearchParams.prototype, find = /[!'\\(\\)~]|%20|%00/g, plus = /\\+/g, replace = { \"!\": \"%21\", \"'\": \"%27\", \"(\": \"%28\", \")\": \"%29\", \"~\": \"%7E\", \"%20\": \"+\", \"%00\": \"\\0\" }, replacer = function (match) { return replace[match] }, secret = \"__URLSearchParams__:\" + Math.random(); function appendTo(dict, name, value) { if (name in dict) { dict[name].push(\"\" + value) } else { dict[name] = isArray(value) ? value : [\"\" + value] } } function decode(str) { return decodeURIComponent(str.replace(plus, \" \")) } function encode(str) { return encodeURIComponent(str).replace(find, replacer) } URLSearchParamsProto.append = function append(name, value) { appendTo(this[secret], name, value) }; URLSearchParamsProto[\"delete\"] = function del(name) { delete this[secret][name] }; URLSearchParamsProto.get = function get(name) { var dict = this[secret]; return name in dict ? dict[name][0] : null }; URLSearchParamsProto.getAll = function getAll(name) { var dict = this[secret]; return name in dict ? dict[name].slice(0) : [] }; URLSearchParamsProto.has = function has(name) { return name in this[secret] }; URLSearchParamsProto.set = function set(name, value) { this[secret][name] = [\"\" + value] }; URLSearchParamsProto.forEach = function forEach(callback, thisArg) { var dict = this[secret]; Object.getOwnPropertyNames(dict).forEach(function (name) { dict[name].forEach(function (value) { callback.call(thisArg, value, name, this) }, this) }, this) }; URLSearchParamsProto.toJSON = function toJSON() { return {} }; URLSearchParamsProto.toString = function toString() { var dict = this[secret], query = [], i, key, name, value; for (key in dict) { name = encode(key); for (i = 0, value = dict[key]; i < value.length; i++) { query.push(name + \"=\" + encode(value[i])) } } return query.join(\"&\") }; var dP = Object.defineProperty, gOPD = Object.getOwnPropertyDescriptor, createSearchParamsPollute = function (search) { function append(name, value) { URLSearchParamsProto.append.call(this, name, value); name = this.toString(); search.set.call(this._usp, name ? \"?\" + name : \"\") } function del(name) { URLSearchParamsProto[\"delete\"].call(this, name); name = this.toString(); search.set.call(this._usp, name ? \"?\" + name : \"\") } function set(name, value) { URLSearchParamsProto.set.call(this, name, value); name = this.toString(); search.set.call(this._usp, name ? \"?\" + name : \"\") } return function (sp, value) { sp.append = append; sp[\"delete\"] = del; sp.set = set; return dP(sp, \"_usp\", { configurable: true, writable: true, value: value }) } }, createSearchParamsCreate = function (polluteSearchParams) { return function (obj, sp) { dP(obj, \"_searchParams\", { configurable: true, writable: true, value: polluteSearchParams(sp, obj) }); return sp } }, updateSearchParams = function (sp) { var append = sp.append; sp.append = URLSearchParamsProto.append; URLSearchParams.call(sp, sp._usp.search.slice(1)); sp.append = append }, verifySearchParams = function (obj, Class) { if (!(obj instanceof Class)) throw new TypeError(\"'searchParams' accessed on an object that \" + \"does not implement interface \" + Class.name) }, upgradeClass = function (Class) { var ClassProto = Class.prototype, searchParams = gOPD(ClassProto, \"searchParams\"), href = gOPD(ClassProto, \"href\"), search = gOPD(ClassProto, \"search\"), createSearchParams; if (!searchParams && search && search.set) { createSearchParams = createSearchParamsCreate(createSearchParamsPollute(search)); Object.defineProperties(ClassProto, { href: { get: function () { return href.get.call(this) }, set: function (value) { var sp = this._searchParams; href.set.call(this, value); if (sp) updateSearchParams(sp) } }, search: { get: function () { return search.get.call(this) }, set: function (value) { var sp = this._searchParams; search.set.call(this, value); if (sp) updateSearchParams(sp) } }, searchParams: { get: function () { verifySearchParams(this, Class); return this._searchParams || createSearchParams(this, new URLSearchParams(this.search.slice(1))) }, set: function (sp) { verifySearchParams(this, Class); createSearchParams(this, sp) } } }) } }; upgradeClass(HTMLAnchorElement); if (/^function|object#[[$]]#/.test(typeof URL) && URL.prototype) upgradeClass(URL); return URLSearchParams }(); (function (URLSearchParamsProto) { var iterable = function () { try { return !!Symbol.iterator } catch (error) { return false } }(); if (!(\"forEach\" in URLSearchParamsProto)) { URLSearchParamsProto.forEach = function forEach(callback, thisArg) { var names = Object.create(null); this.toString().replace(/=[\\s\\S]*?(?:&|#[[$]]#)/g, \"=\").split(\"=\").forEach(function (name) { if (!name.length || name in names) return; (names[name] = this.getAll(name)).forEach(function (value) { callback.call(thisArg, value, name, this) }, this) }, this) } } if (!(\"keys\" in URLSearchParamsProto)) { URLSearchParamsProto.keys = function keys() { var items = []; this.forEach(function (value, name) { items.push(name) }); var iterator = { next: function () { var value = items.shift(); return { done: value === undefined, value: value } } }; if (iterable) { iterator[Symbol.iterator] = function () { return iterator } } return iterator } } if (!(\"values\" in URLSearchParamsProto)) { URLSearchParamsProto.values = function values() { var items = []; this.forEach(function (value) { items.push(value) }); var iterator = { next: function () { var value = items.shift(); return { done: value === undefined, value: value } } }; if (iterable) { iterator[Symbol.iterator] = function () { return iterator } } return iterator } } if (!(\"entries\" in URLSearchParamsProto)) { URLSearchParamsProto.entries = function entries() { var items = []; this.forEach(function (value, name) { items.push([name, value]) }); var iterator = { next: function () { var value = items.shift(); return { done: value === undefined, value: value } } }; if (iterable) { iterator[Symbol.iterator] = function () { return iterator } } return iterator } } if (iterable && !(Symbol.iterator in URLSearchParamsProto)) { URLSearchParamsProto[Symbol.iterator] = URLSearchParamsProto.entries } if (!(\"sort\" in URLSearchParamsProto)) { URLSearchParamsProto.sort = function sort() { var entries = this.entries(), entry = entries.next(), done = entry.done, keys = [], values = Object.create(null), i, key, value; while (!done) { value = entry.value; key = value[0]; keys.push(key); if (!(key in values)) { values[key] = [] } values[key].push(value[1]); entry = entries.next(); done = entry.done } keys.sort(); for (i = 0; i < keys.length; i++) { this[\"delete\"](keys[i]) } for (i = 0; i < keys.length; i++) { key = keys[i]; this.append(key, values[key].shift()) } } } })(URLSearchParams.prototype);\n</script>\n</head>\n\n<body>\n    <h1>PyPiP.in shut down</h1>\n    <p>Some time ago, the\n        <a href=\"https://web.archive.org/web/20150318013508/https://pypip.in/\">original pypip.in service</a> shut down. This broke the badges for thousands of GitHub repos. The domain has been\n        purchased and configured to redirect requests to the still-functioning\n        <a href=\"https://shields.io/\">shields.io</a> service.\n    </p>\n    <p>Since this is costing money to operate, we'd appreciate it if you could change your URLs to point at shields.io directly.</p>\n    <p>If you enter the pypip.in URL you are using into the box below, it will generate the corresponding shields.io URL you\n        should use:</p>\n\n    <div>\n        <form>\n            <div class=\"translation-form\">\n                <p class=\"prompt\">pypip.in badge URL:</p>\n                <input type=\"text\" name=\"pypip\" id=\"pypip_url\">\n                <input type=\"button\" value=\"Translate\" onclick=\"go()\">\n                <p class=\"prompt\">Equivalent shields.io badge URL:</p>\n                <input type=\"text\" id=\"shieldsio_url\">\n                <button type='button' id=\"copy_url_button\" style=\"vertical-align: top;\" onclick=\"copy()\">\n                    <svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 14 16\" width=\"14\">\n                        <path fill-rule=\"evenodd\" d=\"M2 13h4v1H2v-1zm5-6H2v1h5V7zm2 3V8l-3 3 3 3v-2h5v-2H9zM4.5 9H2v1h2.5V9zM2 12h2.5v-1H2v1zm9 1h1v2c-.02.28-.11.52-.3.7-.19.18-.42.28-.7.3H1c-.55 0-1-.45-1-1V4c0-.55.45-1 1-1h3c0-1.11.89-2 2-2 1.11 0 2 .89 2 2h3c.55 0 1 .45 1 1v5h-1V6H1v9h10v-2zM2 5h8c0-.55-.45-1-1-1H8c-.55 0-1-.45-1-1s-.45-1-1-1-1 .45-1 1-.45 1-1 1H3c-.55 0-1 .45-1 1z\"></path>\n                    </svg>\n                </button>\n                <div id=\"download_badge_warning\" class=\"warning\" hidden=true>\n                    <p>Unfortunately,\n                        <a href=\"https://mail.python.org/pipermail/distutils-sig/2013-May/020855.html\">PyPI has removed download statistics from their API</a>, which means that even the shields.io \"download\n                        count\" badges are broken (they display \"no longer available\". See\n                        <a href=\"https://github.com/badges/shields/issues/716\">this</a> and the\n                        <a href=\"#[[#]]#preview\">preview below</a>).</p>\n                </div>\n                <div id=\"egg_badge_warning\" class=\"warning\" hidden=true>\n                    <p>There is no equivalent to the\n                        <code>/egg</code> endpoint in the shields.io API. We'd recommend that you simply delete the badge, as everyone has\n                        <a href=\"https://pythonwheels.com/\">moved to \"wheels\" anyway.</a>\n                    </p>\n                </div>\n                <div id=\"failed_warning\" class=\"warning\" hidden=true>\n                    <p>Unable to parse input URL.</p>\n                </div>\n                <div>\n                    <p id=\"preview\" class=\"prompt\" hidden=\"true\">Preview:</p>\n                    <a href=\"\" id=\"resulting_badge_link\">\n                        <img src=\"\" hidden=\"true\" id=\"resulting_badge\" alt=\"fetching preview...\">\n                    </a>\n                </div>\n            </div>\n        </form>\n\n    </div>\n\n    <p>\n        <b>Disclaimer:</b> This site is in no way affiliated with shields.io, nor is it meant to promote them over other badge\n        providers. If you're interested, you can look at some of the other badge providers and choose the best one for your\n        needs:\n    </p>\n\n    <ul>\n        <li>\n            <a href=\"https://github.com/SavandBros/badge\">SavandBros/badge</a>\n        </li>\n        <li>\n            <a href=\"https://github.com/autophagy/scieldas\">Autophagy/scieldas</a>\n        </li>\n        <li>\n            <a href=\"https://shields.io/\">shields.io</a>\n        </li>\n    </ul>\n\n    <a href=\"mailto:repobot@movermeyer.com\">Know of other badge providers? Questions? Feedback?</a>\n\n    <p> Created by\n        <a href=\"http://eldondev.com\">eldondev</a> and\n        <a href=\"http://movermeyer.com\">movermeyer</a>\n    </p>\n</body>\n\n</html>"
              },
              "responseParameters": {
                "method.response.header.Content-Type": "'text/html'"
              }
            }
          },
          "passthroughBehavior": "when_no_match",
          "requestTemplates": {
            "application/json": "{\"statusCode\": 200}"
          },
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "mock"
        }
      }
    },
    "/egg/{package}/badge.png": {
      "get": {
        "tags": [],
        "description": "The /egg endpoint has no analogue in shields.io. You might want /format or /wheel instead.",
        "produces": [
          "text/html"
        ],
        "parameters": [
          {
            "name": "package",
            "in": "path",
            "description": "The PyPI package to produce the badge for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "Resource Gone",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Media type of request"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "responses": {
            "default": {
              "statusCode": "404",
              "responseTemplates": {
                "text/html": "<html>\n\n<head>\n    <style>\n        body {\n                {\n                color: #[[#]]#333;\n                font-family: Sans-serif;\n                max-width: 800px;\n                margin: auto;\n            }\n        }\n    </style>\n</head>\n\n<body>\n    <h1>\n        <code>/egg</code> no longer exists</h1>\n    <p> pypip.in originally had a\n        <code>/egg</code> endpoint, which presumably returned something similar to the true/false given by the\n        <code>/wheel</code> endpoint.</p>\n    <p> There is no equivalent to the\n        <code>/egg</code> endpoint in the\n        <a href='https://shields.io/'>shields.io</a> API.</p>\n    <p>(pypip.in shut down some time ago and\n        <a href='https://pypip.in/'>now just redirects requests</a> to shields.io).</p>\n    <p>You might be interested in linking to: </p>\n    <ul>\n        <li>\n            <code>https://img.shields.io/pypi/format/#[[$]]#{input.params('package')}.png</code> (\n            <image src=\"https://img.shields.io/pypi/format/#[[$]]#{input.params('package')}.png\"></image>) or</li>\n        <li>\n            <code>https://img.shields.io/pypi/wheel/#[[$]]#{input.params('package')}.png</code> (\n            <image src=\"https://img.shields.io/pypi/wheel/#[[$]]#{input.params('package')}.png\"></image>)\n        </li>\n    </ul>\n    <p>instead.</p>\n</body>\n\n</html>"
              },
              "responseParameters": {
                "method.response.header.Content-Type": "'text/html'"
              }
            }
          },
          "passthroughBehavior": "when_no_match",
          "requestTemplates": {
            "application/json": "{\"statusCode\": 200}"
          },
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "mock"
        }
      }
    },
    "/egg/{package}/badge.svg": {
      "get": {
        "tags": [],
        "description": "The /egg endpoint has no analogue in shields.io. You might want /format or /wheel instead.",
        "produces": [
          "text/html"
        ],
        "parameters": [
          {
            "name": "package",
            "in": "path",
            "description": "The PyPI package to produce the badge for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "Resource Gone",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Media type of request"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "responses": {
            "default": {
              "statusCode": "404",
              "responseTemplates": {
                "text/html": "<html>\n\n<head>\n    <style>\n        body {\n                {\n                color: #[[#]]#333;\n                font-family: Sans-serif;\n                max-width: 800px;\n                margin: auto;\n            }\n        }\n    </style>\n</head>\n\n<body>\n    <h1>\n        <code>/egg</code> no longer exists</h1>\n    <p> pypip.in originally had a\n        <code>/egg</code> endpoint, which presumably returned something similar to the true/false given by the\n        <code>/wheel</code> endpoint.</p>\n    <p> There is no equivalent to the\n        <code>/egg</code> endpoint in the\n        <a href='https://shields.io/'>shields.io</a> API.</p>\n    <p>(pypip.in shut down some time ago and\n        <a href='https://pypip.in/'>now just redirects requests</a> to shields.io).</p>\n    <p>You might be interested in linking to: </p>\n    <ul>\n        <li>\n            <code>https://img.shields.io/pypi/format/#[[$]]#{input.params('package')}.svg</code> (\n            <image src=\"https://img.shields.io/pypi/format/#[[$]]#{input.params('package')}.svg\"></image>) or</li>\n        <li>\n            <code>https://img.shields.io/pypi/wheel/#[[$]]#{input.params('package')}.svg</code> (\n            <image src=\"https://img.shields.io/pypi/wheel/#[[$]]#{input.params('package')}.svg\"></image>)\n        </li>\n    </ul>\n    <p>instead.</p>\n</body>\n\n</html>"
              },
              "responseParameters": {
                "method.response.header.Content-Type": "'text/html'"
              }
            }
          },
          "passthroughBehavior": "when_no_match",
          "requestTemplates": {
            "application/json": "{\"statusCode\": 200}"
          },
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "mock"
        }
      }
    },
    "/egg/{package}/badge.json": {
      "get": {
        "tags": [],
        "description": "The /egg endpoint has no analogue in shields.io. You might want /format or /wheel instead.",
        "produces": [
          "text/html"
        ],
        "parameters": [
          {
            "name": "package",
            "in": "path",
            "description": "The PyPI package to produce the badge for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "Resource Gone",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Media type of request"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "responses": {
            "default": {
              "statusCode": "404",
              "responseTemplates": {
                "text/html": "<html>\n\n<head>\n    <style>\n        body {\n                {\n                color: #[[#]]#333;\n                font-family: Sans-serif;\n                max-width: 800px;\n                margin: auto;\n            }\n        }\n    </style>\n</head>\n\n<body>\n    <h1>\n        <code>/egg</code> no longer exists</h1>\n    <p> pypip.in originally had a\n        <code>/egg</code> endpoint, which presumably returned something similar to the true/false given by the\n        <code>/wheel</code> endpoint.</p>\n    <p> There is no equivalent to the\n        <code>/egg</code> endpoint in the\n        <a href='https://shields.io/'>shields.io</a> API.</p>\n    <p>(pypip.in shut down some time ago and\n        <a href='https://pypip.in/'>now just redirects requests</a> to shields.io).</p>\n    <p>You might be interested in linking to: </p>\n    <ul>\n        <li>\n            <code>https://img.shields.io/pypi/format/#[[$]]#{input.params('package')}.json</code> (\n            <image src=\"https://img.shields.io/pypi/format/#[[$]]#{input.params('package')}.json\"></image>) or</li>\n        <li>\n            <code>https://img.shields.io/pypi/wheel/#[[$]]#{input.params('package')}.json</code> (\n            <image src=\"https://img.shields.io/pypi/wheel/#[[$]]#{input.params('package')}.json\"></image>)\n        </li>\n    </ul>\n    <p>instead.</p>\n</body>\n\n</html>"
              },
              "responseParameters": {
                "method.response.header.Content-Type": "'text/html'"
              }
            }
          },
          "passthroughBehavior": "when_no_match",
          "requestTemplates": {
            "application/json": "{\"statusCode\": 200}"
          },
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "mock"
        }
      }
    },
    "/format/{package}/badge.png": {
      "get": {
        "tags": [],
        "summary": "A badge describing the format that the Python library is packaged as (ex. wheel, source)",
        "deprecated": true,
        "operationId": "get-format-badge-png",
        "produces": [
          "image/png"
        ],
        "parameters": [
          {
            "name": "package",
            "in": "path",
            "description": "The PyPI package to produce the badge for",
            "required": true,
            "type": "string"
          },
          {
            "name": "text",
            "in": "query",
            "description": "Override the default left-hand-side text (URL-Encoding needed for spaces or special characters!)",
            "required": false,
            "type": "string"
          },
          {
            "name": "style",
            "in": "query",
            "description": "The style you want to use for the badge (flat is the default as of Feb 1st 2015)",
            "required": false,
            "type": "string"
          }

        ],
        "responses": {},
        "x-amazon-apigateway-integration": {
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:864340333789:function:PyPipInRedirection/invocations",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      }
    },
    "/format/{package}/badge.svg": {
      "get": {
        "tags": [],
        "summary": "A badge describing the format that the Python library is packaged as (ex. wheel, source)",
        "deprecated": true,
        "operationId": "get-format-badge-svg",
        "produces": [
          "image/svg+xml"
        ],
        "parameters": [
          {
            "name": "package",
            "in": "path",
            "description": "The PyPI package to produce the badge for",
            "required": true,
            "type": "string"
          },
          {
            "name": "text",
            "in": "query",
            "description": "Override the default left-hand-side text (URL-Encoding needed for spaces or special characters!)",
            "required": false,
            "type": "string"
          },
          {
            "name": "style",
            "in": "query",
            "description": "The style you want to use for the badge (flat is the default as of Feb 1st 2015)",
            "required": false,
            "type": "string"
          }

        ],
        "responses": {},
        "x-amazon-apigateway-integration": {
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:864340333789:function:PyPipInRedirection/invocations",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      }
    },
    "/format/{package}/badge.json": {
      "get": {
        "tags": [],
        "summary": "A badge describing the format that the Python library is packaged as (ex. wheel, source)",
        "deprecated": true,
        "operationId": "get-format-badge-json",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "package",
            "in": "path",
            "description": "The PyPI package to produce the badge for",
            "required": true,
            "type": "string"
          },
          {
            "name": "text",
            "in": "query",
            "description": "Override the default left-hand-side text (URL-Encoding needed for spaces or special characters!)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {},
        "x-amazon-apigateway-integration": {
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:864340333789:function:PyPipInRedirection/invocations",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      }
    },
    "/implementation/{package}/badge.png": {
      "get": {
        "tags": [],
        "summary": "A badge describing the Python implementations that the Python library is developed for (ex. cpython, PyPy)",
        "deprecated": true,
        "operationId": "get-implementation-badge-png",
        "produces": [
          "image/png"
        ],
        "parameters": [
          {
            "name": "package",
            "in": "path",
            "description": "The PyPI package to produce the badge for",
            "required": true,
            "type": "string"
          },
          {
            "name": "text",
            "in": "query",
            "description": "Override the default left-hand-side text (URL-Encoding needed for spaces or special characters!)",
            "required": false,
            "type": "string"
          },
          {
            "name": "style",
            "in": "query",
            "description": "The style you want to use for the badge (flat is the default as of Feb 1st 2015)",
            "required": false,
            "type": "string"
          }

        ],
        "responses": {},
        "x-amazon-apigateway-integration": {
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:864340333789:function:PyPipInRedirection/invocations",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      }
    },
    "/implementation/{package}/badge.svg": {
      "get": {
        "tags": [],
        "summary": "A badge describing the Python implementations that the Python library is developed for (ex. cpython, PyPy)",
        "deprecated": true,
        "operationId": "get-implementation-badge-svg",
        "produces": [
          "image/svg+xml"
        ],
        "parameters": [
          {
            "name": "package",
            "in": "path",
            "description": "The PyPI package to produce the badge for",
            "required": true,
            "type": "string"
          },
          {
            "name": "text",
            "in": "query",
            "description": "Override the default left-hand-side text (URL-Encoding needed for spaces or special characters!)",
            "required": false,
            "type": "string"
          },
          {
            "name": "style",
            "in": "query",
            "description": "The style you want to use for the badge (flat is the default as of Feb 1st 2015)",
            "required": false,
            "type": "string"
          }

        ],
        "responses": {},
        "x-amazon-apigateway-integration": {
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:864340333789:function:PyPipInRedirection/invocations",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      }
    },
    "/implementation/{package}/badge.json": {
      "get": {
        "tags": [],
        "summary": "A badge describing the Python implementations that the Python library is developed for (ex. cpython, PyPy)",
        "deprecated": true,
        "operationId": "get-implementation-badge-json",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "package",
            "in": "path",
            "description": "The PyPI package to produce the badge for",
            "required": true,
            "type": "string"
          },
          {
            "name": "text",
            "in": "query",
            "description": "Override the default left-hand-side text (URL-Encoding needed for spaces or special characters!)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {},
        "x-amazon-apigateway-integration": {
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:864340333789:function:PyPipInRedirection/invocations",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      }
    },
    "/license/{package}/badge.png": {
      "get": {
        "tags": [],
        "summary": "A badge describing the software license that the Python library is packaged as (ex. BSD, MIT)",
        "deprecated": true,
        "operationId": "get-license-badge-png",
        "produces": [
          "image/png"
        ],
        "parameters": [
          {
            "name": "package",
            "in": "path",
            "description": "The PyPI package to produce the badge for",
            "required": true,
            "type": "string"
          },
          {
            "name": "text",
            "in": "query",
            "description": "Override the default left-hand-side text (URL-Encoding needed for spaces or special characters!)",
            "required": false,
            "type": "string"
          },
          {
            "name": "style",
            "in": "query",
            "description": "The style you want to use for the badge (flat is the default as of Feb 1st 2015)",
            "required": false,
            "type": "string"
          }

        ],
        "responses": {},
        "x-amazon-apigateway-integration": {
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:864340333789:function:PyPipInRedirection/invocations",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      }
    },
    "/license/{package}/badge.svg": {
      "get": {
        "tags": [],
        "summary": "A badge describing the software license that the Python library is packaged as (ex. BSD, MIT)",
        "deprecated": true,
        "operationId": "get-license-badge-svg",
        "produces": [
          "image/svg+xml"
        ],
        "parameters": [
          {
            "name": "package",
            "in": "path",
            "description": "The PyPI package to produce the badge for",
            "required": true,
            "type": "string"
          },
          {
            "name": "text",
            "in": "query",
            "description": "Override the default left-hand-side text (URL-Encoding needed for spaces or special characters!)",
            "required": false,
            "type": "string"
          },
          {
            "name": "style",
            "in": "query",
            "description": "The style you want to use for the badge (flat is the default as of Feb 1st 2015)",
            "required": false,
            "type": "string"
          }

        ],
        "responses": {},
        "x-amazon-apigateway-integration": {
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:864340333789:function:PyPipInRedirection/invocations",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      }
    },
    "/license/{package}/badge.json": {
      "get": {
        "tags": [],
        "summary": "A badge describing the software license that the Python library is packaged as (ex. BSD, MIT)",
        "deprecated": true,
        "operationId": "get-license-badge-json",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "package",
            "in": "path",
            "description": "The PyPI package to produce the badge for",
            "required": true,
            "type": "string"
          },
          {
            "name": "text",
            "in": "query",
            "description": "Override the default left-hand-side text (URL-Encoding needed for spaces or special characters!)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {},
        "x-amazon-apigateway-integration": {
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:864340333789:function:PyPipInRedirection/invocations",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      }
    },
    "/py_versions/{package}/badge.png": {
      "get": {
        "tags": [],
        "summary": "A badge describing the Python versions that the library supports (ex. 2.7, 3.4)",
        "deprecated": true,
        "operationId": "get-py_versions-badge-png",
        "produces": [
          "image/png"
        ],
        "parameters": [
          {
            "name": "package",
            "in": "path",
            "description": "The PyPI package to produce the badge for",
            "required": true,
            "type": "string"
          },
          {
            "name": "text",
            "in": "query",
            "description": "Override the default left-hand-side text (URL-Encoding needed for spaces or special characters!)",
            "required": false,
            "type": "string"
          },
          {
            "name": "style",
            "in": "query",
            "description": "The style you want to use for the badge (flat is the default as of Feb 1st 2015)",
            "required": false,
            "type": "string"
          }

        ],
        "responses": {},
        "x-amazon-apigateway-integration": {
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:864340333789:function:PyPipInRedirection/invocations",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      }
    },
    "/py_versions/{package}/badge.svg": {
      "get": {
        "tags": [],
        "summary": "A badge describing the Python versions that the library supports (ex. 2.7, 3.4)",
        "deprecated": true,
        "operationId": "get-py_versions-badge-svg",
        "produces": [
          "image/svg+xml"
        ],
        "parameters": [
          {
            "name": "package",
            "in": "path",
            "description": "The PyPI package to produce the badge for",
            "required": true,
            "type": "string"
          },
          {
            "name": "text",
            "in": "query",
            "description": "Override the default left-hand-side text (URL-Encoding needed for spaces or special characters!)",
            "required": false,
            "type": "string"
          },
          {
            "name": "style",
            "in": "query",
            "description": "The style you want to use for the badge (flat is the default as of Feb 1st 2015)",
            "required": false,
            "type": "string"
          }

        ],
        "responses": {},
        "x-amazon-apigateway-integration": {
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:864340333789:function:PyPipInRedirection/invocations",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      }
    },
    "/py_versions/{package}/badge.json": {
      "get": {
        "tags": [],
        "summary": "A badge describing the Python versions that the library supports (ex. 2.7, 3.4)",
        "deprecated": true,
        "operationId": "get-py_versions-badge-json",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "package",
            "in": "path",
            "description": "The PyPI package to produce the badge for",
            "required": true,
            "type": "string"
          },
          {
            "name": "text",
            "in": "query",
            "description": "Override the default left-hand-side text (URL-Encoding needed for spaces or special characters!)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {},
        "x-amazon-apigateway-integration": {
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:864340333789:function:PyPipInRedirection/invocations",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      }
    },
    "/status/{package}/badge.png": {
      "get": {
        "tags": [],
        "summary": "A badge describing the development status of the Python library (ex. alpha, stable)",
        "deprecated": true,
        "operationId": "get-status-badge-png",
        "produces": [
          "image/png"
        ],
        "parameters": [
          {
            "name": "package",
            "in": "path",
            "description": "The PyPI package to produce the badge for",
            "required": true,
            "type": "string"
          },
          {
            "name": "text",
            "in": "query",
            "description": "Override the default left-hand-side text (URL-Encoding needed for spaces or special characters!)",
            "required": false,
            "type": "string"
          },
          {
            "name": "style",
            "in": "query",
            "description": "The style you want to use for the badge (flat is the default as of Feb 1st 2015)",
            "required": false,
            "type": "string"
          }

        ],
        "responses": {},
        "x-amazon-apigateway-integration": {
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:864340333789:function:PyPipInRedirection/invocations",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      }
    },
    "/status/{package}/badge.svg": {
      "get": {
        "tags": [],
        "summary": "A badge describing the development status of the Python library (ex. alpha, stable)",
        "deprecated": true,
        "operationId": "get-status-badge-svg",
        "produces": [
          "image/svg+xml"
        ],
        "parameters": [
          {
            "name": "package",
            "in": "path",
            "description": "The PyPI package to produce the badge for",
            "required": true,
            "type": "string"
          },
          {
            "name": "text",
            "in": "query",
            "description": "Override the default left-hand-side text (URL-Encoding needed for spaces or special characters!)",
            "required": false,
            "type": "string"
          },
          {
            "name": "style",
            "in": "query",
            "description": "The style you want to use for the badge (flat is the default as of Feb 1st 2015)",
            "required": false,
            "type": "string"
          }

        ],
        "responses": {},
        "x-amazon-apigateway-integration": {
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:864340333789:function:PyPipInRedirection/invocations",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      }
    },
    "/status/{package}/badge.json": {
      "get": {
        "tags": [],
        "summary": "A badge describing the development status of the Python library (ex. alpha, stable)",
        "deprecated": true,
        "operationId": "get-status-badge-json",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "package",
            "in": "path",
            "description": "The PyPI package to produce the badge for",
            "required": true,
            "type": "string"
          },
          {
            "name": "text",
            "in": "query",
            "description": "Override the default left-hand-side text (URL-Encoding needed for spaces or special characters!)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {},
        "x-amazon-apigateway-integration": {
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:864340333789:function:PyPipInRedirection/invocations",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      }
    },
    "/v/{package}/badge.png": {
      "get": {
        "tags": [],
        "summary": "A badge describing the version of the Python library. Alias of `version`",
        "deprecated": true,
        "operationId": "get-v-badge-png",
        "produces": [
          "image/png"
        ],
        "parameters": [
          {
            "name": "package",
            "in": "path",
            "description": "The PyPI package to produce the badge for",
            "required": true,
            "type": "string"
          },
          {
            "name": "text",
            "in": "query",
            "description": "Override the default left-hand-side text (URL-Encoding needed for spaces or special characters!)",
            "required": false,
            "type": "string"
          },
          {
            "name": "style",
            "in": "query",
            "description": "The style you want to use for the badge (flat is the default as of Feb 1st 2015)",
            "required": false,
            "type": "string"
          }

        ],
        "responses": {},
        "x-amazon-apigateway-integration": {
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:864340333789:function:PyPipInRedirection/invocations",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      }
    },
    "/v/{package}/badge.svg": {
      "get": {
        "tags": [],
        "summary": "A badge describing the version of the Python library. Alias of `version`",
        "deprecated": true,
        "operationId": "get-v-badge-svg",
        "produces": [
          "image/svg+xml"
        ],
        "parameters": [
          {
            "name": "package",
            "in": "path",
            "description": "The PyPI package to produce the badge for",
            "required": true,
            "type": "string"
          },
          {
            "name": "text",
            "in": "query",
            "description": "Override the default left-hand-side text (URL-Encoding needed for spaces or special characters!)",
            "required": false,
            "type": "string"
          },
          {
            "name": "style",
            "in": "query",
            "description": "The style you want to use for the badge (flat is the default as of Feb 1st 2015)",
            "required": false,
            "type": "string"
          }

        ],
        "responses": {},
        "x-amazon-apigateway-integration": {
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:864340333789:function:PyPipInRedirection/invocations",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      }
    },
    "/v/{package}/badge.json": {
      "get": {
        "tags": [],
        "summary": "A badge describing the version of the Python library. Alias of `version`",
        "deprecated": true,
        "operationId": "get-v-badge-json",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "package",
            "in": "path",
            "description": "The PyPI package to produce the badge for",
            "required": true,
            "type": "string"
          },
          {
            "name": "text",
            "in": "query",
            "description": "Override the default left-hand-side text (URL-Encoding needed for spaces or special characters!)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {},
        "x-amazon-apigateway-integration": {
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:864340333789:function:PyPipInRedirection/invocations",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      }
    },
    "/version/{package}/badge.png": {
      "get": {
        "tags": [],
        "summary": "A badge describing the version of the Python library.",
        "deprecated": true,
        "operationId": "get-version-badge-png",
        "produces": [
          "image/png"
        ],
        "parameters": [
          {
            "name": "package",
            "in": "path",
            "description": "The PyPI package to produce the badge for",
            "required": true,
            "type": "string"
          },
          {
            "name": "text",
            "in": "query",
            "description": "Override the default left-hand-side text (URL-Encoding needed for spaces or special characters!)",
            "required": false,
            "type": "string"
          },
          {
            "name": "style",
            "in": "query",
            "description": "The style you want to use for the badge (flat is the default as of Feb 1st 2015)",
            "required": false,
            "type": "string"
          }

        ],
        "responses": {},
        "x-amazon-apigateway-integration": {
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:864340333789:function:PyPipInRedirection/invocations",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      }
    },
    "/version/{package}/badge.svg": {
      "get": {
        "tags": [],
        "summary": "A badge describing the version of the Python library.",
        "deprecated": true,
        "operationId": "get-version-badge-svg",
        "produces": [
          "image/svg+xml"
        ],
        "parameters": [
          {
            "name": "package",
            "in": "path",
            "description": "The PyPI package to produce the badge for",
            "required": true,
            "type": "string"
          },
          {
            "name": "text",
            "in": "query",
            "description": "Override the default left-hand-side text (URL-Encoding needed for spaces or special characters!)",
            "required": false,
            "type": "string"
          },
          {
            "name": "style",
            "in": "query",
            "description": "The style you want to use for the badge (flat is the default as of Feb 1st 2015)",
            "required": false,
            "type": "string"
          }

        ],
        "responses": {},
        "x-amazon-apigateway-integration": {
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:864340333789:function:PyPipInRedirection/invocations",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      }
    },
    "/version/{package}/badge.json": {
      "get": {
        "tags": [],
        "summary": "A badge describing the version of the Python library.",
        "deprecated": true,
        "operationId": "get-version-badge-json",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "package",
            "in": "path",
            "description": "The PyPI package to produce the badge for",
            "required": true,
            "type": "string"
          },
          {
            "name": "text",
            "in": "query",
            "description": "Override the default left-hand-side text (URL-Encoding needed for spaces or special characters!)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {},
        "x-amazon-apigateway-integration": {
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:864340333789:function:PyPipInRedirection/invocations",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      }
    },
    "/wheel/{package}/badge.png": {
      "get": {
        "tags": [],
        "summary": "A badge describing whether the Python library is packaged as a wheel (ex. yes, no).",
        "deprecated": true,
        "operationId": "get-wheel-badge-png",
        "produces": [
          "image/png"
        ],
        "parameters": [
          {
            "name": "package",
            "in": "path",
            "description": "The PyPI package to produce the badge for",
            "required": true,
            "type": "string"
          },
          {
            "name": "text",
            "in": "query",
            "description": "Override the default left-hand-side text (URL-Encoding needed for spaces or special characters!)",
            "required": false,
            "type": "string"
          },
          {
            "name": "style",
            "in": "query",
            "description": "The style you want to use for the badge (flat is the default as of Feb 1st 2015)",
            "required": false,
            "type": "string"
          }

        ],
        "responses": {},
        "x-amazon-apigateway-integration": {
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:864340333789:function:PyPipInRedirection/invocations",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      }
    },
    "/wheel/{package}/badge.svg": {
      "get": {
        "tags": [],
        "summary": "A badge describing whether the Python library is packaged as a wheel (ex. yes, no).",
        "deprecated": true,
        "operationId": "get-wheel-badge-svg",
        "produces": [
          "image/svg+xml"
        ],
        "parameters": [
          {
            "name": "package",
            "in": "path",
            "description": "The PyPI package to produce the badge for",
            "required": true,
            "type": "string"
          },
          {
            "name": "text",
            "in": "query",
            "description": "Override the default left-hand-side text (URL-Encoding needed for spaces or special characters!)",
            "required": false,
            "type": "string"
          },
          {
            "name": "style",
            "in": "query",
            "description": "The style you want to use for the badge (flat is the default as of Feb 1st 2015)",
            "required": false,
            "type": "string"
          }

        ],
        "responses": {},
        "x-amazon-apigateway-integration": {
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:864340333789:function:PyPipInRedirection/invocations",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      }
    },
    "/wheel/{package}/badge.json": {
      "get": {
        "tags": [],
        "summary": "A badge describing whether the Python library is packaged as a wheel (ex. yes, no).",
        "deprecated": true,
        "operationId": "get-wheel-badge-json",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "package",
            "in": "path",
            "description": "The PyPI package to produce the badge for",
            "required": true,
            "type": "string"
          },
          {
            "name": "text",
            "in": "query",
            "description": "Override the default left-hand-side text (URL-Encoding needed for spaces or special characters!)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {},
        "x-amazon-apigateway-integration": {
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:864340333789:function:PyPipInRedirection/invocations",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      }
    }

  },
  "definitions": {},
  "x-amazon-apigateway-binary-media-types" : [
    "image/png", "image/svg+xml", "application/json"
  ]

}

